<?php

declare(strict_types=1);

use Drupal\Core\Render\Markup;
use Drupal\Component\Utility\Unicode;
use Drupal\Core\Language\LanguageInterface;
use Drupal\file\Entity\File;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Block\BlockManagerInterface;
use Drupal\node\Entity\NodeType;
use Drupal\Component\Utility\Html;
use Drupal\config_pages\Entity\ConfigPages;
use Drupal\Core\Cache\CacheableMetadata;
use Drupal\link\LinkItemInterface;




// /**
//  * Implements hook_preprocess_HOOK() for node.html.twig.
//  */
function theme_sdd_preprocess_node(array &$variables): void
{


  static $bg_classes = [
    'index-0',
    'index-1',
    'index-2'
  ];
  static $counter = 0;

  $class_index = $counter % count($bg_classes);
  $variables['index_count'] = $bg_classes[$class_index];
  $variables['count'] = $counter;
  $counter++;

  $node = $variables['node'];
  $bundle = $node->bundle();

  $title = $node->getTitle();
  $body  = $node->hasField('body') ? $node->get('body')->value : '';

  $shorter_label = Unicode::truncate(strip_tags(preg_replace('/[^\w$\x{0080}-\x{FFFF}]+/u', ' ', $title)), 40, true, true);
  $short_label = Unicode::truncate(strip_tags(preg_replace('/[^\w$\x{0080}-\x{FFFF}]+/u', ' ', $title)), 55, true, true);
  $medium_label = Unicode::truncate(strip_tags(preg_replace('/[^\w$\x{0080}-\x{FFFF}]+/u', ' ', $title)), 70, true, true);
  $shortened_title = Unicode::truncate(strip_tags(string: preg_replace('/[^\w$\x{0080}-\x{FFFF}]+/u', ' ', $title)), 30, true, true);
  $body_short = Unicode::truncate($body ?? '', 190, true, true);
  $body_long = Unicode::truncate($body ?? '', 290, true, true);
  
  $bundle_label = NodeType::load($bundle)->label();
  
  $ds_type_machine_label = '';
  $ds_type_machine_name = '';
  if ($bundle === 'digital_shajrah' && $node->hasField('field_page_type')) {
    $field = $node->get('field_page_type');

    // Machine value (what is stored in DB).
    $ds_type_machine_name = $field->value ?? '';

    // Human-readable label.
    $ds_type_machine_label = $field->getFieldDefinition()
      ->getFieldStorageDefinition()
      ->getOptionsProvider('value', $node)
      ->getPossibleOptions()[$ds_type_machine_name] ?? $ds_type_machine_name;

    $ds_type = [
      'ds_type_machine_label' => $ds_type_machine_label,
      'ds_type_machine_name' => $ds_type_machine_name,
    ];
    $variables['ds_type'] = $ds_type;
  }


  $bundles = ['regulations', 'publications_reports', 'leadership_message'];

  if (in_array($node->bundle(), $bundles, true) && !$node->get('field_attachment')->isEmpty()) {
    $gen = \Drupal::service('file_url_generator');
    $attachments = [];
    foreach ($node->get('field_attachment') as $item) {
      if ($file = $item->entity) {
        $attachments[] = [
          'url'  => $gen->generateAbsoluteString($file->getFileUri()),
          'label' => 'PDF (' . format_size($file->getSize()) . ')',
        ];
      }
    }
    $variables['attachments'] = $attachments;
  }
// load bundle label 

  $variables['shorter_label'] = $shorter_label;
  $variables['short_label'] = $short_label;
  $variables['medium_label'] = $medium_label;
  $variables['shortened_title'] = $shortened_title;
  $variables['body_short'] = $body_short;
  $variables['body_long'] = $body_long;
  $variables['bundle_label'] = $bundle_label;
}


/**
 * Implements hook_preprocess_HOOK() for html.html.twig.
 */

function theme_sdd_preprocess_html(array &$variables): void
{
  // load current page machine name
  $route_match = \Drupal::routeMatch();
  $route_name = $route_match->getRouteName();
  $node       = $route_match->getParameter('node');
  $variables['attributes']['class'][] = 'font-sdd';

  $bundles_with_white_bg = ['custom_page', 'regulations', 'publications_reports', 'digital_shajrah'];
  if (
    $route_name === 'view.faqs.list'
    || ($node instanceof \Drupal\node\NodeInterface && in_array($node->bundle(), $bundles_with_white_bg, true))
  ) {
    $variables['attributes']['class'][] = '!bg-white';
  }
  // add current path to body class
  $current_path = \Drupal::service('path.current')->getPath();
  $current_path_alias = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);
  $variables['attributes']['class'][] = 'path-' . str_replace('/', '-', trim($current_path_alias, '/'));
}


/**
 * Implements hook_form_views_exposed_form_alter().
 *
 * This function alters the exposed filter forms for the services view.
 */
function theme_sdd_form_views_exposed_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id)
{
  // dd($form['#id'])  ;
  
  if ( isset($form['#id']) && $form['#id'] === 'views-exposed-form-search-list-page' ) {

    if (isset($form['type'])) {
      // Add class to the entire BEF link list.
      $form['type']['#attributes']['class'][] = 'bef-taxonomy-links';

      // Add class to each term link.
      foreach ($form['type']['#options'] as $tid => $label) {
        if (!empty($tid)) {

          if ($label ===  "- Any -") {
            $form['type']['#options'][$tid] = t('All');
          }
        }
      }
    }

  }

  if (
    isset($form['#id']) &&
    $form['#id'] === 'views-exposed-form-services-list' ||  $form['#id'] === "views-exposed-form-services-main-page"
  ) {
    if (isset($form['service_type'])) {
      // Add class to the entire BEF link list.
      $form['service_type']['#attributes']['class'][] = 'bef-taxonomy-links';

      // Add class to each term link.
      foreach ($form['service_type']['#options'] as $tid => $label) {
        if (!empty($tid)) {

          if ($label ===  "- Any -") {
            $form['service_type']['#options'][$tid] = t('All');
          }
        }
      }
    }
  }

  if (isset($form['#id']) && $form['#id'] === "views-exposed-form-faqs-list") {

    // Your taxonomy exposed filter element.
    $el_name = isset($form['field_select_type_target_id']) ? 'field_select_type_target_id' : null;
    if (!$el_name || empty($form[$el_name]['#options']) || !is_array($form[$el_name]['#options'])) {
      return;
    }

    // Classes on the widget (and wrapper for good measure).
    $form[$el_name]['#attributes']['class'][] = 'bef-taxonomy-links';
    $form[$el_name]['#attributes']['class'][] = 'hello-world';
    $form[$el_name]['#wrapper_attributes']['class'][] = 'faq-filter';

    // Rename "- Any -" to "All".
    foreach ($form[$el_name]['#options'] as $k => $label) {
      if ($label === '- Any -') {
        $form[$el_name]['#options'][$k] = t('All');
      }
    }

    // Collect tids from options.
    $option_keys = array_keys($form[$el_name]['#options']);
    $tids = array_values(array_filter($option_keys, 'is_numeric'));
    if (!$tids) {
      return;
    }

    // Build counts per term (published, correct bundle, in vocab "faqs").
    $db = \Drupal::database();
    $input = $form_state->getUserInput();
    $bundle = 'faqs';           // <-- change if your FAQ node bundle differs
    $vocab  = 'faqs';          // taxonomy vocabulary machine name

    $q = $db->select('taxonomy_index', 'ti')
      ->fields('ti', ['tid'])
      ->groupBy('ti.tid');
    $q->join('taxonomy_term_field_data', 'ttfd', 'ttfd.tid = ti.tid AND ttfd.vid = :vid', [':vid' => $vocab]);
    $q->join('node_field_data', 'n', 'n.nid = ti.nid');
    $q->condition('n.status', 1)
      ->condition('n.type', $bundle)
      ->condition('ti.tid', $tids, 'IN');
    $q->addExpression('COUNT(DISTINCT n.nid)', 'cnt');

    // Respect other exposed filters (example: text search field).
    if (!empty($input['keys'])) {
      $q->condition('n.title', '%' . $db->escapeLike($input['keys']) . '%', 'LIKE');
    }
    if (!empty($input['title'])) { // if you renamed it to 'title'
      $q->condition('n.title', '%' . $db->escapeLike($input['title']) . '%', 'LIKE');
    }

    // IMPORTANT: do not apply the taxonomy filter itself here.

    $counts = $q->execute()->fetchAllKeyed(0, 1); // tid => cnt

    // Append counts to option labels.
    foreach ($form[$el_name]['#options'] as $tid => $label) {
      if (is_numeric($tid)) {
        $form[$el_name]['#options'][$tid] = $label . ' (' . (int) ($counts[$tid] ?? 0) . ')';
      }
    }
  }


  // if ($form['#id'] === 'views-exposed-form-news-main-page') {
  //   if (isset($form['field_year_value'])) {
  //     $form['field_year_value']['#type'] = 'select';
  //     $form['field_year_value']['#attributes']['class'][] = 'h-[53px] w-full md:max-w-[333px] rounded-lg border border-[#D4D4D8] px-4 py-2';
  //     // remove size 
  //     unset($form['field_year_value']['#size']);
  //     // Start with the default "- Any -" option.
  //     $options = ['' => t('- All -')];

  //     // Get current year.
  //     $current_year = date('Y');

  //     // Generate years from 2000 to current year (descending order).
  //     for ($year = $current_year; $year >= 2000; $year--) {
  //       $options[$year] = (string) $year;
  //     }

  //     $form['field_year_value']['#options'] = $options;
  //     $form['field_year_value']['#empty_option'] = t('- All -');
  //   }

  // }

  if ($form['#id'] ===  "views-exposed-form-media-images-page-grid") {
    // add class to ASC and DESC 
    if (isset($form['sort_order'])) {
      $form['sort_order']['#attributes']['class'][] = 'h-[53px] w-full max-w-[333px] rounded-lg border border-[#D4D4D8] px-4 py-2';
    }
  }
}
/**
 * Implements hook_preprocess_bef_links().
 *
 * This function modifies the BEF links to ensure they point to the correct
 * fragment on the page.
 */

function theme_sdd_preprocess_bef_links(array &$variables)
{

  if (!empty($variables['element']['#name']) && $variables['element']['#name'] === 'service_type') {
    foreach ($variables['children'] as $key => $child) {
      $element = &$variables['element'][$child];
      if (isset($element['#url']) && $element['#url'] instanceof \Drupal\Core\Url) {
        $element['#url']->setOption('fragment', 'services');
      }
    }
  }
}


/**
 * Implements hook_preprocess_links__language_block()
 */
function theme_sdd_preprocess_links__language_block(&$variables)
{
  $current_langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
  if (isset($variables['links'][$current_langcode])) {
    unset($variables['links'][$current_langcode]);
  }


  foreach ($variables['links'] as $i => &$link) {
    /**
     * @var \Drupal\language\Entity\ConfigurableLanguage $linkLanguage
     */
    $linkLanguage = $link['link']['#options']['language'];
    $text = $linkLanguage->getId() === 'ar' ? 'AR' : ($linkLanguage->getId() === 'en' ? 'EN' : $linkLanguage->getName());
    $theme_path = \Drupal::theme()->getActiveTheme()->getPath();
    $full_path =  $theme_path . '/images/language.svg';
    $lang_icon = file_get_contents($full_path);

    $link['link']['#title'] = [
      '#type' => 'inline_template',
      '#template' => '{{ svg|raw }} <span>{{ text|raw }}</span>',
      '#context' => [
        'text' => $text,
        'svg' =>  $lang_icon,

      ],
    ];

    $link['link']['#options']['attributes']['class'][] = 'language-switcher';
  }
}

/**
 * Implements hook_preprocess_paragraph().
 */
function theme_sdd_preprocess_paragraph(array &$variables)
{

  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];

  // 2) Title & Description from fields
  $title = '';
  if ($paragraph->hasField('field_title') && !$paragraph->get('field_title')->isEmpty()) {
    $title = $paragraph->get('field_title')->value;
  }

  $description = '';
  if ($paragraph->hasField('field_description') && !$paragraph->get('field_description')->isEmpty()) {
    // If it's a text_long/formatted, use ->value for plain or ->processed if you want markup.
    $description = $paragraph->get('field_description')->value;
  }

  // 3) Safe truncations
  $clean = fn($t) => trim(preg_replace('/[^\w$\x{0080}-\x{FFFF}\s]+/u', ' ', strip_tags((string) $t)));
  $variables['title_full']        = $title;
  $variables['title_short']       = Unicode::truncate($clean($title), 25, true, true);
  $variables['title_medium']      = Unicode::truncate($clean($title), 70, true, true);
  $variables['description_full']  = $description;
  $variables['description_short'] = Unicode::truncate($clean($description), 150, true, true);
  // load paragraph type 
  $bundle = $paragraph->bundle();
  $variables['paragraph_type'] = $bundle;

  // 🔹 Now check parent node and its field(s).
  if ($parent = $paragraph->getParentEntity()) {

    if ($parent->getEntityTypeId() === 'node') {
      $variables['parent_node_type'] = $parent->bundle();
      $variables['parent_node_id']   = $parent->id();
      // dd($parent->bundle());

      // Example: check a specific field on the node.
      if ($parent->hasField('field_page_type') && !$parent->get('field_page_type')->isEmpty()) {
        $field_value = $parent->get('field_page_type')->value; // machine value
        $variables['ds_selected_type'] = $field_value;
      }
    }
  }
}




/**
 * Implements hook_preprocess_HOOK() for block.html.twig.
 */
function theme_sdd_theme_suggestions_form_alter(array &$suggestions, array $variables)
{
    $suggestions[] = 'form__' . str_replace('-', '_', subject: $variables['element']['#id']);
}


/**
 * Implements hook_theme_suggestions_input_alter().
 */
function theme_sdd_theme_suggestions_input_alter(array &$suggestions, array $variables)
{
  
  
  
    if (isset($variables['element']['#type'])) {
        // Get the original theme hook.
        $theme_hook_original = $variables['element']['#theme'] ?? null;

        // Add a suggestion based on the input type.
        if ($theme_hook_original) {
            $suggestions[] = $theme_hook_original . '__' . $variables['element']['#type'];
        }
    }

  }



  /**
 * Implements hook_preprocess_views_view().
 */
function theme_sdd_preprocess_views_view(&$variables) {
  $view = $variables['view'];  // $view->id()

  // Check for a specific view and display if needed
  if ($view->id() === 'search' && $view->current_display === 'list_page') {
    // Get exposed input
    $exposed_input = $view->getExposedInput();
    
    if (!empty($exposed_input['keys'])) {
      $variables['filter_value'] = $exposed_input['keys'];
    }
  }
  
  
  // services
  if ($view->id() === 'services') {
    $cacheability = new CacheableMetadata();

    // Load Config Pages: home_settings
    if ($config = ConfigPages::config('general_pages')) {
      // Inherit cache from the config entity (includes correct tags).
      $cacheability = $cacheability->merge(CacheableMetadata::createFromObject($config));
      $info = $config->get('field_services_info')->value?? '';
      $details = $config->get('field_serv_header_details')->value?? '';
      $variables['services_header'] = ['title' => $info, 'description'=>  $details];
    
    }
  }
  // our_journey  
  
  if ($view->id() === 'our_journey'  && $view->current_display === 'grid') {
    $cacheability = new CacheableMetadata();

    // Load Config Pages: home_settings
    if ($config = ConfigPages::config('general_pages')) {
      // Inherit cache from the config entity (includes correct tags).
      $cacheability = $cacheability->merge(CacheableMetadata::createFromObject($config));
      $info = $config->get('field_laws_regulations')->value?? '';
      $details = $config->get('field_laws_regulations_descripti')->value?? '';
      $variables['our_journey'] = ['title' => $info, 'description'=>  $details];
    
    }
  }



}


/**
 * e.g. in hook_preprocess_page().
 */
function theme_sdd_preprocess_page(array &$variables) {
  $plugin = \Drupal::service('plugin.manager.block')
    ->createInstance('simplenews_subscription_block', [
      'unique_id' => Html::getUniqueId('simplenews_subscribe_footer'),
    ]);

  $variables['simplenews_subscribe_block'] = $plugin->build();

// Prepare cacheability collector for everything we add.
$cacheability = new CacheableMetadata();

// Load Config Pages: home_settings
if ($config = ConfigPages::config('home_settings')) {
  // Inherit cache from the config entity (includes correct tags).
  $cacheability = $cacheability->merge(CacheableMetadata::createFromObject($config));

  // Helper: read link field and return URL as string (works for external + route links).
  $read_link = static function ($entity, string $field) : string {
    if (!$entity->hasField($field) || $entity->get($field)->isEmpty()) {
      return '';
    }
    $item = $entity->get($field)->first();
    if ($item instanceof LinkItemInterface && $item->getUrl()) {
      return $item->getUrl()->toString();
    }
    // Fallback if stored as raw 'uri'.
    return $entity->get($field)->getValue()[0]['uri'] ?? '';
  };

  $facebook  = $read_link($config, 'field_facebook');
  $instagram = $read_link($config, 'field_instagram');
  $youtube   = $read_link($config, 'field_youtube');
  $twitter   = $read_link($config, 'field_twitter');

  // Copyright text with [year] token.
  $copy_raw = $config->get('field_copyrights')->value ?? '';
  $copy     = $copy_raw ? str_replace('[year]', date('Y'), $copy_raw) : '';

  // Expose to Twig (same structure you used before as #items).
  $variables['items'] = [
    'facebook'   => $facebook,
    'instagram'  => $instagram,
    'youtube'    => $youtube,
    'twitter'    => $twitter,
    'copy_right' => $copy,
  ];
}

// Apply collected cache metadata to the page render context.
$cacheability->applyTo($variables);
  
}